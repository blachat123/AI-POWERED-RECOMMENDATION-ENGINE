# -*- coding: utf-8 -*-
"""AI-POWERED RECOMMENDATION ENGINE.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CIDc8oUU5uoc93rS5bxvYOz-R0mtZkiI
"""

!pip uninstall -y scikit-surprise
!pip install scikit-surprise==1.1.1

import pandas as pd

# Load the dataset
data = pd.read_csv('/content/ratings.csv')  # Example: userId, itemId, rating

# Basic preprocessing
data.dropna(inplace=True)

data

from surprise import SVD, Dataset, Reader
from surprise.model_selection import train_test_split
from surprise import accuracy

# Load dataset for Surprise
reader = Reader(rating_scale=(0.5, 5.0))
data = Dataset.load_from_df(data[['UserId', 'MovieId', 'Rating']], reader)

# Split data for training and testing
trainset, testset = train_test_split(data, test_size=0.2)

# Build and train the SVD model
model = SVD()
model.fit(trainset)

# Predict on test data
predictions = model.test(testset)
print('RMSE:', accuracy.rmse(predictions))

# Generate top 5 recommendations for a specific user
user_id = 1  # Replace with desired UserId
movie_ids = data.df['MovieId'].unique()  # Get all unique movie IDs

# Predict ratings for all movies that the user hasn't rated yet
unrated_movies = [movie_id for movie_id in movie_ids if not trainset.ur[trainset.to_inner_uid(user_id)]]
predictions = [model.predict(user_id, movie_id) for movie_id in unrated_movies]

# Sort predictions by estimated rating
top_predictions = sorted(predictions, key=lambda x: x.est, reverse=True)[:5]

# Print top 5 recommendations
print("Top 5 Recommendations for User ID", user_id)
for pred in top_predictions:
    print(f"Movie ID: {pred.iid}, Estimated Rating: {pred.est:.2f}")

from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/recommend', methods=['GET'])
def recommend():
    user_id = int(request.args.get('user_id'))

    # Get all unrated movies
    unrated_movies = [movie_id for movie_id in movie_ids if not trainset.ur[trainset.to_inner_uid(user_id)]]

    # Predict ratings for unrated movies
    predictions = [model.predict(user_id, movie_id) for movie_id in unrated_movies]

    # Get top 5 recommendations
    top_predictions = sorted(predictions, key=lambda x: x.est, reverse=True)[:5]

    # Prepare response
    recommendations = [{'MovieId': pred.iid, 'EstimatedRating': pred.est} for pred in top_predictions]
    return jsonify(recommendations)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)

import pickle

# Save the trained model
with open('svd_model.pkl', 'wb') as f:
    pickle.dump(model, f)

# Load the model
with open('svd_model.pkl', 'rb') as f:
    loaded_model = pickle.load(f)